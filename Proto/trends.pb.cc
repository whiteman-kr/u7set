#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 6011)
#pragma warning(disable : 4100)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4127)
#pragma warning(disable : 4996)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trends.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trends.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto {

namespace {

const ::google::protobuf::Descriptor* TrendStateRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrendStateRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrendArchiveHour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrendArchiveHour_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrendArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrendArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrendSignalParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrendSignalParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrendSignalSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrendSignalSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrendRuler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrendRuler_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrendRulerSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrendRulerSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trend_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrendParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrendParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrendWidget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrendWidget_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_trends_2eproto() {
  protobuf_AddDesc_trends_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trends.proto");
  GOOGLE_CHECK(file != NULL);
  TrendStateRecord_descriptor_ = file->message_type(0);
  static const int TrendStateRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendStateRecord, states_raw_buffer_v1_),
  };
  TrendStateRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrendStateRecord_descriptor_,
      TrendStateRecord::default_instance_,
      TrendStateRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendStateRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendStateRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrendStateRecord));
  TrendArchiveHour_descriptor_ = file->message_type(1);
  static const int TrendArchiveHour_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendArchiveHour, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendArchiveHour, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendArchiveHour, records_),
  };
  TrendArchiveHour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrendArchiveHour_descriptor_,
      TrendArchiveHour::default_instance_,
      TrendArchiveHour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendArchiveHour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendArchiveHour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrendArchiveHour));
  TrendArchive_descriptor_ = file->message_type(2);
  static const int TrendArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendArchive, app_signal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendArchive, hours_),
  };
  TrendArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrendArchive_descriptor_,
      TrendArchive::default_instance_,
      TrendArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrendArchive));
  TrendSignalParam_descriptor_ = file->message_type(3);
  static const int TrendSignalParam_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, signal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, app_signal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, equipment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, line_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, high_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, low_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, view_high_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, view_low_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, analog_format_),
  };
  TrendSignalParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrendSignalParam_descriptor_,
      TrendSignalParam::default_instance_,
      TrendSignalParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrendSignalParam));
  TrendSignalSet_descriptor_ = file->message_type(4);
  static const int TrendSignalSet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalSet, signal_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalSet, archive_local_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalSet, archive_system_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalSet, archive_plant_time_),
  };
  TrendSignalSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrendSignalSet_descriptor_,
      TrendSignalSet::default_instance_,
      TrendSignalSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendSignalSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrendSignalSet));
  TrendRuler_descriptor_ = file->message_type(5);
  static const int TrendRuler_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendRuler, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendRuler, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendRuler, show_signal_values_),
  };
  TrendRuler_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrendRuler_descriptor_,
      TrendRuler::default_instance_,
      TrendRuler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendRuler, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendRuler, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrendRuler));
  TrendRulerSet_descriptor_ = file->message_type(6);
  static const int TrendRulerSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendRulerSet, rulers_),
  };
  TrendRulerSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrendRulerSet_descriptor_,
      TrendRulerSet::default_instance_,
      TrendRulerSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendRulerSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendRulerSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrendRulerSet));
  Trend_descriptor_ = file->message_type(7);
  static const int Trend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, signal_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, ruler_set_),
  };
  Trend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trend_descriptor_,
      Trend::default_instance_,
      Trend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trend));
  TrendParam_descriptor_ = file->message_type(8);
  static const int TrendParam_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, view_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, lane_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, back_color_1st_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, back_color_2nd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, scale_type_),
  };
  TrendParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrendParam_descriptor_,
      TrendParam::default_instance_,
      TrendParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrendParam));
  TrendWidget_descriptor_ = file->message_type(9);
  static const int TrendWidget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendWidget, trend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendWidget, trend_param_),
  };
  TrendWidget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrendWidget_descriptor_,
      TrendWidget::default_instance_,
      TrendWidget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendWidget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrendWidget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrendWidget));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trends_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrendStateRecord_descriptor_, &TrendStateRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrendArchiveHour_descriptor_, &TrendArchiveHour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrendArchive_descriptor_, &TrendArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrendSignalParam_descriptor_, &TrendSignalParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrendSignalSet_descriptor_, &TrendSignalSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrendRuler_descriptor_, &TrendRuler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrendRulerSet_descriptor_, &TrendRulerSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trend_descriptor_, &Trend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrendParam_descriptor_, &TrendParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrendWidget_descriptor_, &TrendWidget::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trends_2eproto() {
  delete TrendStateRecord::default_instance_;
  delete TrendStateRecord_reflection_;
  delete TrendArchiveHour::default_instance_;
  delete TrendArchiveHour_reflection_;
  delete TrendArchive::default_instance_;
  delete TrendArchive_reflection_;
  delete TrendSignalParam::default_instance_;
  delete TrendSignalParam_reflection_;
  delete TrendSignalParam::_default_analog_format_;
  delete TrendSignalSet::default_instance_;
  delete TrendSignalSet_reflection_;
  delete TrendRuler::default_instance_;
  delete TrendRuler_reflection_;
  delete TrendRulerSet::default_instance_;
  delete TrendRulerSet_reflection_;
  delete Trend::default_instance_;
  delete Trend_reflection_;
  delete TrendParam::default_instance_;
  delete TrendParam_reflection_;
  delete TrendWidget::default_instance_;
  delete TrendWidget_reflection_;
}

void protobuf_AddDesc_trends_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014trends.proto\022\005Proto\"0\n\020TrendStateRecor"
    "d\022\034\n\024states_raw_buffer_v1\030\004 \001(\014\"_\n\020Trend"
    "ArchiveHour\022\022\n\ntime_stamp\030\002 \001(\006\022\r\n\005state"
    "\030\003 \001(\005\022(\n\007records\030\004 \003(\0132\027.Proto.TrendSta"
    "teRecord\"M\n\014TrendArchive\022\025\n\rapp_signal_i"
    "d\030\002 \001(\t\022&\n\005hours\030\n \003(\0132\027.Proto.TrendArch"
    "iveHour\"\263\002\n\020TrendSignalParam\022\021\n\tsignal_i"
    "d\030\002 \001(\t\022\025\n\rapp_signal_id\030\003 \001(\t\022\017\n\007captio"
    "n\030\004 \001(\t\022\024\n\014equipment_id\030\005 \001(\t\022\014\n\004type\030\n "
    "\001(\005\022\014\n\004unit\030\013 \001(\t\022\021\n\tprecision\030\014 \001(\005\022\026\n\013"
    "line_weight\030\023 \001(\001:\0010\022\022\n\nhigh_limit\030\024 \001(\001"
    "\022\021\n\tlow_limit\030\025 \001(\001\022\027\n\017view_high_limit\030\037"
    " \001(\001\022\026\n\016view_low_limit\030  \001(\001\022\r\n\005color\030( "
    "\001(\r\022 \n\ranalog_format\030) \001(\t:\tg_9_or_9e\"\324\001"
    "\n\016TrendSignalSet\022.\n\rsignal_params\030\002 \003(\0132"
    "\027.Proto.TrendSignalParam\022/\n\022archive_loca"
    "l_time\030\n \003(\0132\023.Proto.TrendArchive\0220\n\023arc"
    "hive_system_time\030\013 \003(\0132\023.Proto.TrendArch"
    "ive\022/\n\022archive_plant_time\030\014 \003(\0132\023.Proto."
    "TrendArchive\"V\n\nTrendRuler\022\022\n\ntime_stamp"
    "\030\002 \001(\006\022\022\n\004show\030\003 \001(\010:\004true\022 \n\022show_signa"
    "l_values\030\004 \001(\010:\004true\"2\n\rTrendRulerSet\022!\n"
    "\006rulers\030\002 \003(\0132\021.Proto.TrendRuler\"[\n\005Tren"
    "d\022)\n\nsignal_set\030\002 \001(\0132\025.Proto.TrendSigna"
    "lSet\022\'\n\truler_set\030\003 \001(\0132\024.Proto.TrendRul"
    "erSet\"\274\001\n\nTrendParam\022\024\n\tview_mode\030\002 \001(\005:"
    "\0010\022\024\n\ttime_type\030\003 \001(\005:\0012\022\025\n\nlane_count\030\004"
    " \001(\005:\0011\022\022\n\nstart_time\0302 \001(\006\022\020\n\010duration\030"
    "3 \001(\003\022\026\n\016back_color_1st\030F \001(\r\022\026\n\016back_co"
    "lor_2nd\030G \001(\r\022\025\n\nscale_type\030\005 \001(\005:\0010\"R\n\013"
    "TrendWidget\022\033\n\005trend\030\002 \001(\0132\014.Proto.Trend"
    "\022&\n\013trend_param\030\003 \001(\0132\021.Proto.TrendParam", 1280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trends.proto", &protobuf_RegisterTypes);
  TrendStateRecord::default_instance_ = new TrendStateRecord();
  TrendArchiveHour::default_instance_ = new TrendArchiveHour();
  TrendArchive::default_instance_ = new TrendArchive();
  TrendSignalParam::_default_analog_format_ =
      new ::std::string("g_9_or_9e", 9);
  TrendSignalParam::default_instance_ = new TrendSignalParam();
  TrendSignalSet::default_instance_ = new TrendSignalSet();
  TrendRuler::default_instance_ = new TrendRuler();
  TrendRulerSet::default_instance_ = new TrendRulerSet();
  Trend::default_instance_ = new Trend();
  TrendParam::default_instance_ = new TrendParam();
  TrendWidget::default_instance_ = new TrendWidget();
  TrendStateRecord::default_instance_->InitAsDefaultInstance();
  TrendArchiveHour::default_instance_->InitAsDefaultInstance();
  TrendArchive::default_instance_->InitAsDefaultInstance();
  TrendSignalParam::default_instance_->InitAsDefaultInstance();
  TrendSignalSet::default_instance_->InitAsDefaultInstance();
  TrendRuler::default_instance_->InitAsDefaultInstance();
  TrendRulerSet::default_instance_->InitAsDefaultInstance();
  Trend::default_instance_->InitAsDefaultInstance();
  TrendParam::default_instance_->InitAsDefaultInstance();
  TrendWidget::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trends_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trends_2eproto {
  StaticDescriptorInitializer_trends_2eproto() {
    protobuf_AddDesc_trends_2eproto();
  }
} static_descriptor_initializer_trends_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TrendStateRecord::kStatesRawBufferV1FieldNumber;
#endif  // !_MSC_VER

TrendStateRecord::TrendStateRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrendStateRecord::InitAsDefaultInstance() {
}

TrendStateRecord::TrendStateRecord(const TrendStateRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrendStateRecord::SharedCtor() {
  _cached_size_ = 0;
  states_raw_buffer_v1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrendStateRecord::~TrendStateRecord() {
  SharedDtor();
}

void TrendStateRecord::SharedDtor() {
  if (states_raw_buffer_v1_ != &::google::protobuf::internal::kEmptyString) {
    delete states_raw_buffer_v1_;
  }
  if (this != default_instance_) {
  }
}

void TrendStateRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrendStateRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrendStateRecord_descriptor_;
}

const TrendStateRecord& TrendStateRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

TrendStateRecord* TrendStateRecord::default_instance_ = NULL;

TrendStateRecord* TrendStateRecord::New() const {
  return new TrendStateRecord;
}

void TrendStateRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_states_raw_buffer_v1()) {
      if (states_raw_buffer_v1_ != &::google::protobuf::internal::kEmptyString) {
        states_raw_buffer_v1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrendStateRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes states_raw_buffer_v1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_states_raw_buffer_v1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrendStateRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes states_raw_buffer_v1 = 4;
  if (has_states_raw_buffer_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->states_raw_buffer_v1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrendStateRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes states_raw_buffer_v1 = 4;
  if (has_states_raw_buffer_v1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->states_raw_buffer_v1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrendStateRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes states_raw_buffer_v1 = 4;
    if (has_states_raw_buffer_v1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->states_raw_buffer_v1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrendStateRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrendStateRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrendStateRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrendStateRecord::MergeFrom(const TrendStateRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_states_raw_buffer_v1()) {
      set_states_raw_buffer_v1(from.states_raw_buffer_v1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrendStateRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendStateRecord::CopyFrom(const TrendStateRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendStateRecord::IsInitialized() const {

  return true;
}

void TrendStateRecord::Swap(TrendStateRecord* other) {
  if (other != this) {
    std::swap(states_raw_buffer_v1_, other->states_raw_buffer_v1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrendStateRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrendStateRecord_descriptor_;
  metadata.reflection = TrendStateRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrendArchiveHour::kTimeStampFieldNumber;
const int TrendArchiveHour::kStateFieldNumber;
const int TrendArchiveHour::kRecordsFieldNumber;
#endif  // !_MSC_VER

TrendArchiveHour::TrendArchiveHour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrendArchiveHour::InitAsDefaultInstance() {
}

TrendArchiveHour::TrendArchiveHour(const TrendArchiveHour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrendArchiveHour::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrendArchiveHour::~TrendArchiveHour() {
  SharedDtor();
}

void TrendArchiveHour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrendArchiveHour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrendArchiveHour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrendArchiveHour_descriptor_;
}

const TrendArchiveHour& TrendArchiveHour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

TrendArchiveHour* TrendArchiveHour::default_instance_ = NULL;

TrendArchiveHour* TrendArchiveHour::New() const {
  return new TrendArchiveHour;
}

void TrendArchiveHour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrendArchiveHour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_records;
        break;
      }

      // repeated .Proto.TrendStateRecord records = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrendArchiveHour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->time_stamp(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // repeated .Proto.TrendStateRecord records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrendArchiveHour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->time_stamp(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // repeated .Proto.TrendStateRecord records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrendArchiveHour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .Proto.TrendStateRecord records = 4;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrendArchiveHour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrendArchiveHour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrendArchiveHour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrendArchiveHour::MergeFrom(const TrendArchiveHour& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrendArchiveHour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendArchiveHour::CopyFrom(const TrendArchiveHour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendArchiveHour::IsInitialized() const {

  return true;
}

void TrendArchiveHour::Swap(TrendArchiveHour* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(state_, other->state_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrendArchiveHour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrendArchiveHour_descriptor_;
  metadata.reflection = TrendArchiveHour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrendArchive::kAppSignalIdFieldNumber;
const int TrendArchive::kHoursFieldNumber;
#endif  // !_MSC_VER

TrendArchive::TrendArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrendArchive::InitAsDefaultInstance() {
}

TrendArchive::TrendArchive(const TrendArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrendArchive::SharedCtor() {
  _cached_size_ = 0;
  app_signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrendArchive::~TrendArchive() {
  SharedDtor();
}

void TrendArchive::SharedDtor() {
  if (app_signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_signal_id_;
  }
  if (this != default_instance_) {
  }
}

void TrendArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrendArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrendArchive_descriptor_;
}

const TrendArchive& TrendArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

TrendArchive* TrendArchive::default_instance_ = NULL;

TrendArchive* TrendArchive::New() const {
  return new TrendArchive;
}

void TrendArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_signal_id()) {
      if (app_signal_id_ != &::google::protobuf::internal::kEmptyString) {
        app_signal_id_->clear();
      }
    }
  }
  hours_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrendArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_signal_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_signal_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_signal_id().data(), this->app_signal_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hours;
        break;
      }

      // repeated .Proto.TrendArchiveHour hours = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hours:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hours()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hours;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrendArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string app_signal_id = 2;
  if (has_app_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_signal_id().data(), this->app_signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_signal_id(), output);
  }

  // repeated .Proto.TrendArchiveHour hours = 10;
  for (int i = 0; i < this->hours_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hours(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrendArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string app_signal_id = 2;
  if (has_app_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_signal_id().data(), this->app_signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_signal_id(), target);
  }

  // repeated .Proto.TrendArchiveHour hours = 10;
  for (int i = 0; i < this->hours_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->hours(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrendArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string app_signal_id = 2;
    if (has_app_signal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_signal_id());
    }

  }
  // repeated .Proto.TrendArchiveHour hours = 10;
  total_size += 1 * this->hours_size();
  for (int i = 0; i < this->hours_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hours(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrendArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrendArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrendArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrendArchive::MergeFrom(const TrendArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  hours_.MergeFrom(from.hours_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_signal_id()) {
      set_app_signal_id(from.app_signal_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrendArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendArchive::CopyFrom(const TrendArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendArchive::IsInitialized() const {

  return true;
}

void TrendArchive::Swap(TrendArchive* other) {
  if (other != this) {
    std::swap(app_signal_id_, other->app_signal_id_);
    hours_.Swap(&other->hours_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrendArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrendArchive_descriptor_;
  metadata.reflection = TrendArchive_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TrendSignalParam::_default_analog_format_ = NULL;
#ifndef _MSC_VER
const int TrendSignalParam::kSignalIdFieldNumber;
const int TrendSignalParam::kAppSignalIdFieldNumber;
const int TrendSignalParam::kCaptionFieldNumber;
const int TrendSignalParam::kEquipmentIdFieldNumber;
const int TrendSignalParam::kTypeFieldNumber;
const int TrendSignalParam::kUnitFieldNumber;
const int TrendSignalParam::kPrecisionFieldNumber;
const int TrendSignalParam::kLineWeightFieldNumber;
const int TrendSignalParam::kHighLimitFieldNumber;
const int TrendSignalParam::kLowLimitFieldNumber;
const int TrendSignalParam::kViewHighLimitFieldNumber;
const int TrendSignalParam::kViewLowLimitFieldNumber;
const int TrendSignalParam::kColorFieldNumber;
const int TrendSignalParam::kAnalogFormatFieldNumber;
#endif  // !_MSC_VER

TrendSignalParam::TrendSignalParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrendSignalParam::InitAsDefaultInstance() {
}

TrendSignalParam::TrendSignalParam(const TrendSignalParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrendSignalParam::SharedCtor() {
  _cached_size_ = 0;
  signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_signal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equipment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  precision_ = 0;
  line_weight_ = 0;
  high_limit_ = 0;
  low_limit_ = 0;
  view_high_limit_ = 0;
  view_low_limit_ = 0;
  color_ = 0u;
  analog_format_ = const_cast< ::std::string*>(_default_analog_format_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrendSignalParam::~TrendSignalParam() {
  SharedDtor();
}

void TrendSignalParam::SharedDtor() {
  if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete signal_id_;
  }
  if (app_signal_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_signal_id_;
  }
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (equipment_id_ != &::google::protobuf::internal::kEmptyString) {
    delete equipment_id_;
  }
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (analog_format_ != _default_analog_format_) {
    delete analog_format_;
  }
  if (this != default_instance_) {
  }
}

void TrendSignalParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrendSignalParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrendSignalParam_descriptor_;
}

const TrendSignalParam& TrendSignalParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

TrendSignalParam* TrendSignalParam::default_instance_ = NULL;

TrendSignalParam* TrendSignalParam::New() const {
  return new TrendSignalParam;
}

void TrendSignalParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signal_id()) {
      if (signal_id_ != &::google::protobuf::internal::kEmptyString) {
        signal_id_->clear();
      }
    }
    if (has_app_signal_id()) {
      if (app_signal_id_ != &::google::protobuf::internal::kEmptyString) {
        app_signal_id_->clear();
      }
    }
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    if (has_equipment_id()) {
      if (equipment_id_ != &::google::protobuf::internal::kEmptyString) {
        equipment_id_->clear();
      }
    }
    type_ = 0;
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::kEmptyString) {
        unit_->clear();
      }
    }
    precision_ = 0;
    line_weight_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    high_limit_ = 0;
    low_limit_ = 0;
    view_high_limit_ = 0;
    view_low_limit_ = 0;
    color_ = 0u;
    if (has_analog_format()) {
      if (analog_format_ != _default_analog_format_) {
        analog_format_->assign(*_default_analog_format_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrendSignalParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signal_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signal_id().data(), this->signal_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app_signal_id;
        break;
      }

      // optional string app_signal_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_signal_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_signal_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_signal_id().data(), this->app_signal_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_caption;
        break;
      }

      // optional string caption = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equipment_id;
        break;
      }

      // optional string equipment_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipment_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equipment_id().data(), this->equipment_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional int32 type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_unit;
        break;
      }

      // optional string unit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_precision;
        break;
      }

      // optional int32 precision = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_line_weight;
        break;
      }

      // optional double line_weight = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_line_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_weight_)));
          set_has_line_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_high_limit;
        break;
      }

      // optional double high_limit = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_limit_)));
          set_has_high_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_low_limit;
        break;
      }

      // optional double low_limit = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_limit_)));
          set_has_low_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_view_high_limit;
        break;
      }

      // optional double view_high_limit = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_view_high_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_high_limit_)));
          set_has_view_high_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_view_low_limit;
        break;
      }

      // optional double view_low_limit = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_view_low_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_low_limit_)));
          set_has_view_low_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_color;
        break;
      }

      // optional uint32 color = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_analog_format;
        break;
      }

      // optional string analog_format = 41 [default = "g_9_or_9e"];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_analog_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analog_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->analog_format().data(), this->analog_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrendSignalParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string signal_id = 2;
  if (has_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_id().data(), this->signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signal_id(), output);
  }

  // optional string app_signal_id = 3;
  if (has_app_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_signal_id().data(), this->app_signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->app_signal_id(), output);
  }

  // optional string caption = 4;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->caption(), output);
  }

  // optional string equipment_id = 5;
  if (has_equipment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipment_id().data(), this->equipment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->equipment_id(), output);
  }

  // optional int32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->type(), output);
  }

  // optional string unit = 11;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->unit(), output);
  }

  // optional int32 precision = 12;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->precision(), output);
  }

  // optional double line_weight = 19 [default = 0];
  if (has_line_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->line_weight(), output);
  }

  // optional double high_limit = 20;
  if (has_high_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->high_limit(), output);
  }

  // optional double low_limit = 21;
  if (has_low_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->low_limit(), output);
  }

  // optional double view_high_limit = 31;
  if (has_view_high_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->view_high_limit(), output);
  }

  // optional double view_low_limit = 32;
  if (has_view_low_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->view_low_limit(), output);
  }

  // optional uint32 color = 40;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->color(), output);
  }

  // optional string analog_format = 41 [default = "g_9_or_9e"];
  if (has_analog_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analog_format().data(), this->analog_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->analog_format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrendSignalParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string signal_id = 2;
  if (has_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signal_id().data(), this->signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signal_id(), target);
  }

  // optional string app_signal_id = 3;
  if (has_app_signal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_signal_id().data(), this->app_signal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->app_signal_id(), target);
  }

  // optional string caption = 4;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->caption(), target);
  }

  // optional string equipment_id = 5;
  if (has_equipment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equipment_id().data(), this->equipment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->equipment_id(), target);
  }

  // optional int32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->type(), target);
  }

  // optional string unit = 11;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->unit(), target);
  }

  // optional int32 precision = 12;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->precision(), target);
  }

  // optional double line_weight = 19 [default = 0];
  if (has_line_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->line_weight(), target);
  }

  // optional double high_limit = 20;
  if (has_high_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->high_limit(), target);
  }

  // optional double low_limit = 21;
  if (has_low_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->low_limit(), target);
  }

  // optional double view_high_limit = 31;
  if (has_view_high_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->view_high_limit(), target);
  }

  // optional double view_low_limit = 32;
  if (has_view_low_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->view_low_limit(), target);
  }

  // optional uint32 color = 40;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->color(), target);
  }

  // optional string analog_format = 41 [default = "g_9_or_9e"];
  if (has_analog_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analog_format().data(), this->analog_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->analog_format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrendSignalParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string signal_id = 2;
    if (has_signal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal_id());
    }

    // optional string app_signal_id = 3;
    if (has_app_signal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_signal_id());
    }

    // optional string caption = 4;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string equipment_id = 5;
    if (has_equipment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipment_id());
    }

    // optional int32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string unit = 11;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

    // optional int32 precision = 12;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional double line_weight = 19 [default = 0];
    if (has_line_weight()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double high_limit = 20;
    if (has_high_limit()) {
      total_size += 2 + 8;
    }

    // optional double low_limit = 21;
    if (has_low_limit()) {
      total_size += 2 + 8;
    }

    // optional double view_high_limit = 31;
    if (has_view_high_limit()) {
      total_size += 2 + 8;
    }

    // optional double view_low_limit = 32;
    if (has_view_low_limit()) {
      total_size += 2 + 8;
    }

    // optional uint32 color = 40;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional string analog_format = 41 [default = "g_9_or_9e"];
    if (has_analog_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->analog_format());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrendSignalParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrendSignalParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrendSignalParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrendSignalParam::MergeFrom(const TrendSignalParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal_id()) {
      set_signal_id(from.signal_id());
    }
    if (from.has_app_signal_id()) {
      set_app_signal_id(from.app_signal_id());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_equipment_id()) {
      set_equipment_id(from.equipment_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_line_weight()) {
      set_line_weight(from.line_weight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_high_limit()) {
      set_high_limit(from.high_limit());
    }
    if (from.has_low_limit()) {
      set_low_limit(from.low_limit());
    }
    if (from.has_view_high_limit()) {
      set_view_high_limit(from.view_high_limit());
    }
    if (from.has_view_low_limit()) {
      set_view_low_limit(from.view_low_limit());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_analog_format()) {
      set_analog_format(from.analog_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrendSignalParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendSignalParam::CopyFrom(const TrendSignalParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendSignalParam::IsInitialized() const {

  return true;
}

void TrendSignalParam::Swap(TrendSignalParam* other) {
  if (other != this) {
    std::swap(signal_id_, other->signal_id_);
    std::swap(app_signal_id_, other->app_signal_id_);
    std::swap(caption_, other->caption_);
    std::swap(equipment_id_, other->equipment_id_);
    std::swap(type_, other->type_);
    std::swap(unit_, other->unit_);
    std::swap(precision_, other->precision_);
    std::swap(line_weight_, other->line_weight_);
    std::swap(high_limit_, other->high_limit_);
    std::swap(low_limit_, other->low_limit_);
    std::swap(view_high_limit_, other->view_high_limit_);
    std::swap(view_low_limit_, other->view_low_limit_);
    std::swap(color_, other->color_);
    std::swap(analog_format_, other->analog_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrendSignalParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrendSignalParam_descriptor_;
  metadata.reflection = TrendSignalParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrendSignalSet::kSignalParamsFieldNumber;
const int TrendSignalSet::kArchiveLocalTimeFieldNumber;
const int TrendSignalSet::kArchiveSystemTimeFieldNumber;
const int TrendSignalSet::kArchivePlantTimeFieldNumber;
#endif  // !_MSC_VER

TrendSignalSet::TrendSignalSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrendSignalSet::InitAsDefaultInstance() {
}

TrendSignalSet::TrendSignalSet(const TrendSignalSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrendSignalSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrendSignalSet::~TrendSignalSet() {
  SharedDtor();
}

void TrendSignalSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrendSignalSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrendSignalSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrendSignalSet_descriptor_;
}

const TrendSignalSet& TrendSignalSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

TrendSignalSet* TrendSignalSet::default_instance_ = NULL;

TrendSignalSet* TrendSignalSet::New() const {
  return new TrendSignalSet;
}

void TrendSignalSet::Clear() {
  signal_params_.Clear();
  archive_local_time_.Clear();
  archive_system_time_.Clear();
  archive_plant_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrendSignalSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.TrendSignalParam signal_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signal_params;
        if (input->ExpectTag(82)) goto parse_archive_local_time;
        break;
      }

      // repeated .Proto.TrendArchive archive_local_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archive_local_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_archive_local_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_archive_local_time;
        if (input->ExpectTag(90)) goto parse_archive_system_time;
        break;
      }

      // repeated .Proto.TrendArchive archive_system_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archive_system_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_archive_system_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_archive_system_time;
        if (input->ExpectTag(98)) goto parse_archive_plant_time;
        break;
      }

      // repeated .Proto.TrendArchive archive_plant_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archive_plant_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_archive_plant_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_archive_plant_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrendSignalSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.TrendSignalParam signal_params = 2;
  for (int i = 0; i < this->signal_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signal_params(i), output);
  }

  // repeated .Proto.TrendArchive archive_local_time = 10;
  for (int i = 0; i < this->archive_local_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->archive_local_time(i), output);
  }

  // repeated .Proto.TrendArchive archive_system_time = 11;
  for (int i = 0; i < this->archive_system_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->archive_system_time(i), output);
  }

  // repeated .Proto.TrendArchive archive_plant_time = 12;
  for (int i = 0; i < this->archive_plant_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->archive_plant_time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrendSignalSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.TrendSignalParam signal_params = 2;
  for (int i = 0; i < this->signal_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signal_params(i), target);
  }

  // repeated .Proto.TrendArchive archive_local_time = 10;
  for (int i = 0; i < this->archive_local_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->archive_local_time(i), target);
  }

  // repeated .Proto.TrendArchive archive_system_time = 11;
  for (int i = 0; i < this->archive_system_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->archive_system_time(i), target);
  }

  // repeated .Proto.TrendArchive archive_plant_time = 12;
  for (int i = 0; i < this->archive_plant_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->archive_plant_time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrendSignalSet::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.TrendSignalParam signal_params = 2;
  total_size += 1 * this->signal_params_size();
  for (int i = 0; i < this->signal_params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signal_params(i));
  }

  // repeated .Proto.TrendArchive archive_local_time = 10;
  total_size += 1 * this->archive_local_time_size();
  for (int i = 0; i < this->archive_local_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->archive_local_time(i));
  }

  // repeated .Proto.TrendArchive archive_system_time = 11;
  total_size += 1 * this->archive_system_time_size();
  for (int i = 0; i < this->archive_system_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->archive_system_time(i));
  }

  // repeated .Proto.TrendArchive archive_plant_time = 12;
  total_size += 1 * this->archive_plant_time_size();
  for (int i = 0; i < this->archive_plant_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->archive_plant_time(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrendSignalSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrendSignalSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrendSignalSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrendSignalSet::MergeFrom(const TrendSignalSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  signal_params_.MergeFrom(from.signal_params_);
  archive_local_time_.MergeFrom(from.archive_local_time_);
  archive_system_time_.MergeFrom(from.archive_system_time_);
  archive_plant_time_.MergeFrom(from.archive_plant_time_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrendSignalSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendSignalSet::CopyFrom(const TrendSignalSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendSignalSet::IsInitialized() const {

  return true;
}

void TrendSignalSet::Swap(TrendSignalSet* other) {
  if (other != this) {
    signal_params_.Swap(&other->signal_params_);
    archive_local_time_.Swap(&other->archive_local_time_);
    archive_system_time_.Swap(&other->archive_system_time_);
    archive_plant_time_.Swap(&other->archive_plant_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrendSignalSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrendSignalSet_descriptor_;
  metadata.reflection = TrendSignalSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrendRuler::kTimeStampFieldNumber;
const int TrendRuler::kShowFieldNumber;
const int TrendRuler::kShowSignalValuesFieldNumber;
#endif  // !_MSC_VER

TrendRuler::TrendRuler()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrendRuler::InitAsDefaultInstance() {
}

TrendRuler::TrendRuler(const TrendRuler& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrendRuler::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  show_ = true;
  show_signal_values_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrendRuler::~TrendRuler() {
  SharedDtor();
}

void TrendRuler::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrendRuler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrendRuler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrendRuler_descriptor_;
}

const TrendRuler& TrendRuler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

TrendRuler* TrendRuler::default_instance_ = NULL;

TrendRuler* TrendRuler::New() const {
  return new TrendRuler;
}

void TrendRuler::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
    show_ = true;
    show_signal_values_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrendRuler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show;
        break;
      }

      // optional bool show = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_signal_values;
        break;
      }

      // optional bool show_signal_values = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_signal_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_signal_values_)));
          set_has_show_signal_values();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrendRuler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->time_stamp(), output);
  }

  // optional bool show = 3 [default = true];
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->show(), output);
  }

  // optional bool show_signal_values = 4 [default = true];
  if (has_show_signal_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show_signal_values(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrendRuler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->time_stamp(), target);
  }

  // optional bool show = 3 [default = true];
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->show(), target);
  }

  // optional bool show_signal_values = 4 [default = true];
  if (has_show_signal_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show_signal_values(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrendRuler::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

    // optional bool show = 3 [default = true];
    if (has_show()) {
      total_size += 1 + 1;
    }

    // optional bool show_signal_values = 4 [default = true];
    if (has_show_signal_values()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrendRuler::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrendRuler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrendRuler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrendRuler::MergeFrom(const TrendRuler& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_show_signal_values()) {
      set_show_signal_values(from.show_signal_values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrendRuler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendRuler::CopyFrom(const TrendRuler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendRuler::IsInitialized() const {

  return true;
}

void TrendRuler::Swap(TrendRuler* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(show_, other->show_);
    std::swap(show_signal_values_, other->show_signal_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrendRuler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrendRuler_descriptor_;
  metadata.reflection = TrendRuler_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrendRulerSet::kRulersFieldNumber;
#endif  // !_MSC_VER

TrendRulerSet::TrendRulerSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrendRulerSet::InitAsDefaultInstance() {
}

TrendRulerSet::TrendRulerSet(const TrendRulerSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrendRulerSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrendRulerSet::~TrendRulerSet() {
  SharedDtor();
}

void TrendRulerSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrendRulerSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrendRulerSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrendRulerSet_descriptor_;
}

const TrendRulerSet& TrendRulerSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

TrendRulerSet* TrendRulerSet::default_instance_ = NULL;

TrendRulerSet* TrendRulerSet::New() const {
  return new TrendRulerSet;
}

void TrendRulerSet::Clear() {
  rulers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrendRulerSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.TrendRuler rulers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rulers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rulers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rulers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrendRulerSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Proto.TrendRuler rulers = 2;
  for (int i = 0; i < this->rulers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rulers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrendRulerSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Proto.TrendRuler rulers = 2;
  for (int i = 0; i < this->rulers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rulers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrendRulerSet::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.TrendRuler rulers = 2;
  total_size += 1 * this->rulers_size();
  for (int i = 0; i < this->rulers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rulers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrendRulerSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrendRulerSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrendRulerSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrendRulerSet::MergeFrom(const TrendRulerSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  rulers_.MergeFrom(from.rulers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrendRulerSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendRulerSet::CopyFrom(const TrendRulerSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendRulerSet::IsInitialized() const {

  return true;
}

void TrendRulerSet::Swap(TrendRulerSet* other) {
  if (other != this) {
    rulers_.Swap(&other->rulers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrendRulerSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrendRulerSet_descriptor_;
  metadata.reflection = TrendRulerSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Trend::kSignalSetFieldNumber;
const int Trend::kRulerSetFieldNumber;
#endif  // !_MSC_VER

Trend::Trend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trend::InitAsDefaultInstance() {
  signal_set_ = const_cast< ::Proto::TrendSignalSet*>(&::Proto::TrendSignalSet::default_instance());
  ruler_set_ = const_cast< ::Proto::TrendRulerSet*>(&::Proto::TrendRulerSet::default_instance());
}

Trend::Trend(const Trend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trend::SharedCtor() {
  _cached_size_ = 0;
  signal_set_ = NULL;
  ruler_set_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trend::~Trend() {
  SharedDtor();
}

void Trend::SharedDtor() {
  if (this != default_instance_) {
    delete signal_set_;
    delete ruler_set_;
  }
}

void Trend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trend_descriptor_;
}

const Trend& Trend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

Trend* Trend::default_instance_ = NULL;

Trend* Trend::New() const {
  return new Trend;
}

void Trend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signal_set()) {
      if (signal_set_ != NULL) signal_set_->::Proto::TrendSignalSet::Clear();
    }
    if (has_ruler_set()) {
      if (ruler_set_ != NULL) ruler_set_->::Proto::TrendRulerSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.TrendSignalSet signal_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ruler_set;
        break;
      }

      // optional .Proto.TrendRulerSet ruler_set = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruler_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ruler_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Proto.TrendSignalSet signal_set = 2;
  if (has_signal_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signal_set(), output);
  }

  // optional .Proto.TrendRulerSet ruler_set = 3;
  if (has_ruler_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ruler_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Proto.TrendSignalSet signal_set = 2;
  if (has_signal_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signal_set(), target);
  }

  // optional .Proto.TrendRulerSet ruler_set = 3;
  if (has_ruler_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ruler_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Proto.TrendSignalSet signal_set = 2;
    if (has_signal_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal_set());
    }

    // optional .Proto.TrendRulerSet ruler_set = 3;
    if (has_ruler_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ruler_set());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trend::MergeFrom(const Trend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal_set()) {
      mutable_signal_set()->::Proto::TrendSignalSet::MergeFrom(from.signal_set());
    }
    if (from.has_ruler_set()) {
      mutable_ruler_set()->::Proto::TrendRulerSet::MergeFrom(from.ruler_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trend::CopyFrom(const Trend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trend::IsInitialized() const {

  return true;
}

void Trend::Swap(Trend* other) {
  if (other != this) {
    std::swap(signal_set_, other->signal_set_);
    std::swap(ruler_set_, other->ruler_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trend_descriptor_;
  metadata.reflection = Trend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrendParam::kViewModeFieldNumber;
const int TrendParam::kTimeTypeFieldNumber;
const int TrendParam::kLaneCountFieldNumber;
const int TrendParam::kStartTimeFieldNumber;
const int TrendParam::kDurationFieldNumber;
const int TrendParam::kBackColor1StFieldNumber;
const int TrendParam::kBackColor2NdFieldNumber;
const int TrendParam::kScaleTypeFieldNumber;
#endif  // !_MSC_VER

TrendParam::TrendParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrendParam::InitAsDefaultInstance() {
}

TrendParam::TrendParam(const TrendParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrendParam::SharedCtor() {
  _cached_size_ = 0;
  view_mode_ = 0;
  time_type_ = 2;
  lane_count_ = 1;
  start_time_ = GOOGLE_ULONGLONG(0);
  duration_ = GOOGLE_LONGLONG(0);
  back_color_1st_ = 0u;
  back_color_2nd_ = 0u;
  scale_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrendParam::~TrendParam() {
  SharedDtor();
}

void TrendParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrendParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrendParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrendParam_descriptor_;
}

const TrendParam& TrendParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

TrendParam* TrendParam::default_instance_ = NULL;

TrendParam* TrendParam::New() const {
  return new TrendParam;
}

void TrendParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    view_mode_ = 0;
    time_type_ = 2;
    lane_count_ = 1;
    start_time_ = GOOGLE_ULONGLONG(0);
    duration_ = GOOGLE_LONGLONG(0);
    back_color_1st_ = 0u;
    back_color_2nd_ = 0u;
    scale_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrendParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 view_mode = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_mode_)));
          set_has_view_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_type;
        break;
      }

      // optional int32 time_type = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_type_)));
          set_has_time_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lane_count;
        break;
      }

      // optional int32 lane_count = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lane_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_count_)));
          set_has_lane_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scale_type;
        break;
      }

      // optional int32 scale_type = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_type_)));
          set_has_scale_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(401)) goto parse_start_time;
        break;
      }

      // optional fixed64 start_time = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_duration;
        break;
      }

      // optional int64 duration = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_back_color_1st;
        break;
      }

      // optional uint32 back_color_1st = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_color_1st:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_color_1st_)));
          set_has_back_color_1st();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_back_color_2nd;
        break;
      }

      // optional uint32 back_color_2nd = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_color_2nd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_color_2nd_)));
          set_has_back_color_2nd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrendParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 view_mode = 2 [default = 0];
  if (has_view_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->view_mode(), output);
  }

  // optional int32 time_type = 3 [default = 2];
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_type(), output);
  }

  // optional int32 lane_count = 4 [default = 1];
  if (has_lane_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lane_count(), output);
  }

  // optional int32 scale_type = 5 [default = 0];
  if (has_scale_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scale_type(), output);
  }

  // optional fixed64 start_time = 50;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(50, this->start_time(), output);
  }

  // optional int64 duration = 51;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->duration(), output);
  }

  // optional uint32 back_color_1st = 70;
  if (has_back_color_1st()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->back_color_1st(), output);
  }

  // optional uint32 back_color_2nd = 71;
  if (has_back_color_2nd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->back_color_2nd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrendParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 view_mode = 2 [default = 0];
  if (has_view_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->view_mode(), target);
  }

  // optional int32 time_type = 3 [default = 2];
  if (has_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_type(), target);
  }

  // optional int32 lane_count = 4 [default = 1];
  if (has_lane_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lane_count(), target);
  }

  // optional int32 scale_type = 5 [default = 0];
  if (has_scale_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scale_type(), target);
  }

  // optional fixed64 start_time = 50;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(50, this->start_time(), target);
  }

  // optional int64 duration = 51;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->duration(), target);
  }

  // optional uint32 back_color_1st = 70;
  if (has_back_color_1st()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->back_color_1st(), target);
  }

  // optional uint32 back_color_2nd = 71;
  if (has_back_color_2nd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->back_color_2nd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrendParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 view_mode = 2 [default = 0];
    if (has_view_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view_mode());
    }

    // optional int32 time_type = 3 [default = 2];
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_type());
    }

    // optional int32 lane_count = 4 [default = 1];
    if (has_lane_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_count());
    }

    // optional fixed64 start_time = 50;
    if (has_start_time()) {
      total_size += 2 + 8;
    }

    // optional int64 duration = 51;
    if (has_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration());
    }

    // optional uint32 back_color_1st = 70;
    if (has_back_color_1st()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back_color_1st());
    }

    // optional uint32 back_color_2nd = 71;
    if (has_back_color_2nd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back_color_2nd());
    }

    // optional int32 scale_type = 5 [default = 0];
    if (has_scale_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrendParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrendParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrendParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrendParam::MergeFrom(const TrendParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view_mode()) {
      set_view_mode(from.view_mode());
    }
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
    if (from.has_lane_count()) {
      set_lane_count(from.lane_count());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_back_color_1st()) {
      set_back_color_1st(from.back_color_1st());
    }
    if (from.has_back_color_2nd()) {
      set_back_color_2nd(from.back_color_2nd());
    }
    if (from.has_scale_type()) {
      set_scale_type(from.scale_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrendParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendParam::CopyFrom(const TrendParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendParam::IsInitialized() const {

  return true;
}

void TrendParam::Swap(TrendParam* other) {
  if (other != this) {
    std::swap(view_mode_, other->view_mode_);
    std::swap(time_type_, other->time_type_);
    std::swap(lane_count_, other->lane_count_);
    std::swap(start_time_, other->start_time_);
    std::swap(duration_, other->duration_);
    std::swap(back_color_1st_, other->back_color_1st_);
    std::swap(back_color_2nd_, other->back_color_2nd_);
    std::swap(scale_type_, other->scale_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrendParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrendParam_descriptor_;
  metadata.reflection = TrendParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrendWidget::kTrendFieldNumber;
const int TrendWidget::kTrendParamFieldNumber;
#endif  // !_MSC_VER

TrendWidget::TrendWidget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrendWidget::InitAsDefaultInstance() {
  trend_ = const_cast< ::Proto::Trend*>(&::Proto::Trend::default_instance());
  trend_param_ = const_cast< ::Proto::TrendParam*>(&::Proto::TrendParam::default_instance());
}

TrendWidget::TrendWidget(const TrendWidget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrendWidget::SharedCtor() {
  _cached_size_ = 0;
  trend_ = NULL;
  trend_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrendWidget::~TrendWidget() {
  SharedDtor();
}

void TrendWidget::SharedDtor() {
  if (this != default_instance_) {
    delete trend_;
    delete trend_param_;
  }
}

void TrendWidget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrendWidget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrendWidget_descriptor_;
}

const TrendWidget& TrendWidget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trends_2eproto();
  return *default_instance_;
}

TrendWidget* TrendWidget::default_instance_ = NULL;

TrendWidget* TrendWidget::New() const {
  return new TrendWidget;
}

void TrendWidget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trend()) {
      if (trend_ != NULL) trend_->::Proto::Trend::Clear();
    }
    if (has_trend_param()) {
      if (trend_param_ != NULL) trend_param_->::Proto::TrendParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrendWidget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.Trend trend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trend_param;
        break;
      }

      // optional .Proto.TrendParam trend_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trend_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trend_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrendWidget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Proto.Trend trend = 2;
  if (has_trend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trend(), output);
  }

  // optional .Proto.TrendParam trend_param = 3;
  if (has_trend_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trend_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrendWidget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Proto.Trend trend = 2;
  if (has_trend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trend(), target);
  }

  // optional .Proto.TrendParam trend_param = 3;
  if (has_trend_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trend_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrendWidget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Proto.Trend trend = 2;
    if (has_trend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trend());
    }

    // optional .Proto.TrendParam trend_param = 3;
    if (has_trend_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trend_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrendWidget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrendWidget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrendWidget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrendWidget::MergeFrom(const TrendWidget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trend()) {
      mutable_trend()->::Proto::Trend::MergeFrom(from.trend());
    }
    if (from.has_trend_param()) {
      mutable_trend_param()->::Proto::TrendParam::MergeFrom(from.trend_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrendWidget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendWidget::CopyFrom(const TrendWidget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendWidget::IsInitialized() const {

  return true;
}

void TrendWidget::Swap(TrendWidget* other) {
  if (other != this) {
    std::swap(trend_, other->trend_);
    std::swap(trend_param_, other->trend_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrendWidget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrendWidget_descriptor_;
  metadata.reflection = TrendWidget_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#pragma warning(pop)
#endif