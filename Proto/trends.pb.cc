#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
#pragma warning(disable : 4127)
#pragma warning(disable : 4267)
#pragma warning(disable : 4512)
#pragma warning(disable : 4996)
#pragma warning(disable : 6011)
#pragma warning(disable : 6326)
#pragma warning(disable : 6385)
#pragma warning(disable : 6387)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trends.proto

#include "trends.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Proto {
constexpr TrendStateRecord::TrendStateRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : states_raw_buffer_v1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TrendStateRecordDefaultTypeInternal {
  constexpr TrendStateRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendStateRecordDefaultTypeInternal() {}
  union {
    TrendStateRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendStateRecordDefaultTypeInternal _TrendStateRecord_default_instance_;
constexpr TrendArchiveHour::TrendArchiveHour(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : records_()
  , time_stamp_(PROTOBUF_ULONGLONG(0))
  , state_(0){}
struct TrendArchiveHourDefaultTypeInternal {
  constexpr TrendArchiveHourDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendArchiveHourDefaultTypeInternal() {}
  union {
    TrendArchiveHour _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendArchiveHourDefaultTypeInternal _TrendArchiveHour_default_instance_;
constexpr TrendArchive::TrendArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hours_()
  , app_signal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TrendArchiveDefaultTypeInternal {
  constexpr TrendArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendArchiveDefaultTypeInternal() {}
  union {
    TrendArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendArchiveDefaultTypeInternal _TrendArchive_default_instance_;
constexpr TrendViewLimit::TrendViewLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : high_limit_(0)
  , low_limit_(0)
  , type_(0){}
struct TrendViewLimitDefaultTypeInternal {
  constexpr TrendViewLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendViewLimitDefaultTypeInternal() {}
  union {
    TrendViewLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendViewLimitDefaultTypeInternal _TrendViewLimit_default_instance_;
constexpr TrendSignalParam::TrendSignalParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : view_limits_()
  , signal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_signal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , equipment_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , analog_format_(nullptr)
  , type_(0)
  , precision_(0)
  , color_(0u)
  , line_weight_(0)
  , high_limit_(0)
  , low_limit_(0)
  , view_high_limit_(0)
  , view_low_limit_(0){}
struct TrendSignalParamDefaultTypeInternal {
  constexpr TrendSignalParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendSignalParamDefaultTypeInternal() {}
  union {
    TrendSignalParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendSignalParamDefaultTypeInternal _TrendSignalParam_default_instance_;
constexpr TrendSignalSet::TrendSignalSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signal_params_()
  , archive_local_time_()
  , archive_system_time_()
  , archive_plant_time_(){}
struct TrendSignalSetDefaultTypeInternal {
  constexpr TrendSignalSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendSignalSetDefaultTypeInternal() {}
  union {
    TrendSignalSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendSignalSetDefaultTypeInternal _TrendSignalSet_default_instance_;
constexpr TrendRuler::TrendRuler(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_stamp_(PROTOBUF_ULONGLONG(0))
  , show_(true)
  , show_signal_values_(true){}
struct TrendRulerDefaultTypeInternal {
  constexpr TrendRulerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendRulerDefaultTypeInternal() {}
  union {
    TrendRuler _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendRulerDefaultTypeInternal _TrendRuler_default_instance_;
constexpr TrendRulerSet::TrendRulerSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rulers_(){}
struct TrendRulerSetDefaultTypeInternal {
  constexpr TrendRulerSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendRulerSetDefaultTypeInternal() {}
  union {
    TrendRulerSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendRulerSetDefaultTypeInternal _TrendRulerSet_default_instance_;
constexpr Trend::Trend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signal_set_(nullptr)
  , ruler_set_(nullptr){}
struct TrendDefaultTypeInternal {
  constexpr TrendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendDefaultTypeInternal() {}
  union {
    Trend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendDefaultTypeInternal _Trend_default_instance_;
constexpr TrendParam::TrendParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : view_mode_(0)
  , scale_type_(0)
  , start_time_(PROTOBUF_ULONGLONG(0))
  , duration_(PROTOBUF_LONGLONG(0))
  , back_color_1st_(0u)
  , back_color_2nd_(0u)
  , time_type_(2)
  , lane_count_(1){}
struct TrendParamDefaultTypeInternal {
  constexpr TrendParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendParamDefaultTypeInternal() {}
  union {
    TrendParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendParamDefaultTypeInternal _TrendParam_default_instance_;
constexpr TrendWidget::TrendWidget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trend_(nullptr)
  , trend_param_(nullptr){}
struct TrendWidgetDefaultTypeInternal {
  constexpr TrendWidgetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrendWidgetDefaultTypeInternal() {}
  union {
    TrendWidget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrendWidgetDefaultTypeInternal _TrendWidget_default_instance_;
}  // namespace Proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trends_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_trends_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trends_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trends_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Proto::TrendStateRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendStateRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendStateRecord, states_raw_buffer_v1_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::TrendArchiveHour, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendArchiveHour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendArchiveHour, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendArchiveHour, state_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendArchiveHour, records_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Proto::TrendArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendArchive, app_signal_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendArchive, hours_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Proto::TrendViewLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendViewLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendViewLimit, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendViewLimit, high_limit_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendViewLimit, low_limit_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, signal_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, app_signal_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, caption_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, equipment_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, unit_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, precision_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, line_weight_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, high_limit_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, low_limit_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, view_high_limit_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, view_low_limit_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, view_limits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, color_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalParam, analog_format_),
  0,
  1,
  2,
  3,
  6,
  4,
  7,
  9,
  10,
  11,
  12,
  13,
  ~0u,
  8,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalSet, signal_params_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalSet, archive_local_time_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalSet, archive_system_time_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendSignalSet, archive_plant_time_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendRuler, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendRuler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendRuler, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendRuler, show_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendRuler, show_signal_values_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendRulerSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendRulerSet, rulers_),
  PROTOBUF_FIELD_OFFSET(::Proto::Trend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::Trend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Trend, signal_set_),
  PROTOBUF_FIELD_OFFSET(::Proto::Trend, ruler_set_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, view_mode_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, time_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, lane_count_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, start_time_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, duration_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, back_color_1st_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, back_color_2nd_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendParam, scale_type_),
  0,
  6,
  7,
  2,
  3,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::Proto::TrendWidget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendWidget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TrendWidget, trend_),
  PROTOBUF_FIELD_OFFSET(::Proto::TrendWidget, trend_param_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::Proto::TrendStateRecord)},
  { 7, 15, sizeof(::Proto::TrendArchiveHour)},
  { 18, 25, sizeof(::Proto::TrendArchive)},
  { 27, 35, sizeof(::Proto::TrendViewLimit)},
  { 38, 58, sizeof(::Proto::TrendSignalParam)},
  { 73, -1, sizeof(::Proto::TrendSignalSet)},
  { 82, 90, sizeof(::Proto::TrendRuler)},
  { 93, -1, sizeof(::Proto::TrendRulerSet)},
  { 99, 106, sizeof(::Proto::Trend)},
  { 108, 121, sizeof(::Proto::TrendParam)},
  { 129, 136, sizeof(::Proto::TrendWidget)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendStateRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendArchiveHour_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendViewLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendSignalParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendSignalSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendRuler_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendRulerSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Trend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TrendWidget_default_instance_),
};

const char descriptor_table_protodef_trends_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014trends.proto\022\005Proto\"0\n\020TrendStateRecor"
  "d\022\034\n\024states_raw_buffer_v1\030\004 \001(\014\"_\n\020Trend"
  "ArchiveHour\022\022\n\ntime_stamp\030\002 \001(\006\022\r\n\005state"
  "\030\003 \001(\005\022(\n\007records\030\004 \003(\0132\027.Proto.TrendSta"
  "teRecord\"M\n\014TrendArchive\022\025\n\rapp_signal_i"
  "d\030\002 \001(\t\022&\n\005hours\030\n \003(\0132\027.Proto.TrendArch"
  "iveHour\"E\n\016TrendViewLimit\022\014\n\004type\030\001 \001(\005\022"
  "\022\n\nhigh_limit\030\002 \001(\001\022\021\n\tlow_limit\030\003 \001(\001\"\337"
  "\002\n\020TrendSignalParam\022\021\n\tsignal_id\030\002 \001(\t\022\025"
  "\n\rapp_signal_id\030\003 \001(\t\022\017\n\007caption\030\004 \001(\t\022\024"
  "\n\014equipment_id\030\005 \001(\t\022\014\n\004type\030\n \001(\005\022\014\n\004un"
  "it\030\013 \001(\t\022\021\n\tprecision\030\014 \001(\005\022\026\n\013line_weig"
  "ht\030\023 \001(\001:\0010\022\022\n\nhigh_limit\030\024 \001(\001\022\021\n\tlow_l"
  "imit\030\025 \001(\001\022\027\n\017view_high_limit\030\037 \001(\001\022\026\n\016v"
  "iew_low_limit\030  \001(\001\022*\n\013view_limits\030! \003(\013"
  "2\025.Proto.TrendViewLimit\022\r\n\005color\030( \001(\r\022 "
  "\n\ranalog_format\030) \001(\t:\tg_9_or_9e\"\324\001\n\016Tre"
  "ndSignalSet\022.\n\rsignal_params\030\002 \003(\0132\027.Pro"
  "to.TrendSignalParam\022/\n\022archive_local_tim"
  "e\030\n \003(\0132\023.Proto.TrendArchive\0220\n\023archive_"
  "system_time\030\013 \003(\0132\023.Proto.TrendArchive\022/"
  "\n\022archive_plant_time\030\014 \003(\0132\023.Proto.Trend"
  "Archive\"V\n\nTrendRuler\022\022\n\ntime_stamp\030\002 \001("
  "\006\022\022\n\004show\030\003 \001(\010:\004true\022 \n\022show_signal_val"
  "ues\030\004 \001(\010:\004true\"2\n\rTrendRulerSet\022!\n\006rule"
  "rs\030\002 \003(\0132\021.Proto.TrendRuler\"[\n\005Trend\022)\n\n"
  "signal_set\030\002 \001(\0132\025.Proto.TrendSignalSet\022"
  "\'\n\truler_set\030\003 \001(\0132\024.Proto.TrendRulerSet"
  "\"\274\001\n\nTrendParam\022\024\n\tview_mode\030\002 \001(\005:\0010\022\024\n"
  "\ttime_type\030\003 \001(\005:\0012\022\025\n\nlane_count\030\004 \001(\005:"
  "\0011\022\022\n\nstart_time\0302 \001(\006\022\020\n\010duration\0303 \001(\003"
  "\022\026\n\016back_color_1st\030F \001(\r\022\026\n\016back_color_2"
  "nd\030G \001(\r\022\025\n\nscale_type\030\005 \001(\005:\0010\"R\n\013Trend"
  "Widget\022\033\n\005trend\030\002 \001(\0132\014.Proto.Trend\022&\n\013t"
  "rend_param\030\003 \001(\0132\021.Proto.TrendParam"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trends_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trends_2eproto = {
  false, false, 1395, descriptor_table_protodef_trends_2eproto, "trends.proto", 
  &descriptor_table_trends_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_trends_2eproto::offsets,
  file_level_metadata_trends_2eproto, file_level_enum_descriptors_trends_2eproto, file_level_service_descriptors_trends_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_trends_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trends_2eproto);
  return descriptor_table_trends_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_trends_2eproto(&descriptor_table_trends_2eproto);
namespace Proto {

// ===================================================================

class TrendStateRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<TrendStateRecord>()._has_bits_);
  static void set_has_states_raw_buffer_v1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrendStateRecord::TrendStateRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendStateRecord)
}
TrendStateRecord::TrendStateRecord(const TrendStateRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  states_raw_buffer_v1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_states_raw_buffer_v1()) {
    states_raw_buffer_v1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_states_raw_buffer_v1(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.TrendStateRecord)
}

void TrendStateRecord::SharedCtor() {
states_raw_buffer_v1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrendStateRecord::~TrendStateRecord() {
  // @@protoc_insertion_point(destructor:Proto.TrendStateRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendStateRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  states_raw_buffer_v1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrendStateRecord::ArenaDtor(void* object) {
  TrendStateRecord* _this = reinterpret_cast< TrendStateRecord* >(object);
  (void)_this;
}
void TrendStateRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendStateRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendStateRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendStateRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    states_raw_buffer_v1_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendStateRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes states_raw_buffer_v1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_states_raw_buffer_v1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendStateRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendStateRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes states_raw_buffer_v1 = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_states_raw_buffer_v1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendStateRecord)
  return target;
}

size_t TrendStateRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendStateRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes states_raw_buffer_v1 = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_states_raw_buffer_v1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendStateRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendStateRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendStateRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendStateRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendStateRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendStateRecord)
    MergeFrom(*source);
  }
}

void TrendStateRecord::MergeFrom(const TrendStateRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendStateRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_states_raw_buffer_v1()) {
    _internal_set_states_raw_buffer_v1(from._internal_states_raw_buffer_v1());
  }
}

void TrendStateRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendStateRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendStateRecord::CopyFrom(const TrendStateRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendStateRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendStateRecord::IsInitialized() const {
  return true;
}

void TrendStateRecord::InternalSwap(TrendStateRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  states_raw_buffer_v1_.Swap(&other->states_raw_buffer_v1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendStateRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrendArchiveHour::_Internal {
 public:
  using HasBits = decltype(std::declval<TrendArchiveHour>()._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TrendArchiveHour::TrendArchiveHour(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendArchiveHour)
}
TrendArchiveHour::TrendArchiveHour(const TrendArchiveHour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:Proto.TrendArchiveHour)
}

void TrendArchiveHour::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_stamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(state_));
}

TrendArchiveHour::~TrendArchiveHour() {
  // @@protoc_insertion_point(destructor:Proto.TrendArchiveHour)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendArchiveHour::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrendArchiveHour::ArenaDtor(void* object) {
  TrendArchiveHour* _this = reinterpret_cast< TrendArchiveHour* >(object);
  (void)_this;
}
void TrendArchiveHour::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendArchiveHour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendArchiveHour::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendArchiveHour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&time_stamp_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendArchiveHour::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TrendStateRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendArchiveHour::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendArchiveHour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 time_stamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_time_stamp(), target);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  // repeated .Proto.TrendStateRecord records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendArchiveHour)
  return target;
}

size_t TrendArchiveHour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendArchiveHour)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.TrendStateRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 time_stamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendArchiveHour::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendArchiveHour)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendArchiveHour* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendArchiveHour>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendArchiveHour)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendArchiveHour)
    MergeFrom(*source);
  }
}

void TrendArchiveHour::MergeFrom(const TrendArchiveHour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendArchiveHour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrendArchiveHour::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendArchiveHour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendArchiveHour::CopyFrom(const TrendArchiveHour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendArchiveHour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendArchiveHour::IsInitialized() const {
  return true;
}

void TrendArchiveHour::InternalSwap(TrendArchiveHour* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrendArchiveHour, state_)
      + sizeof(TrendArchiveHour::state_)
      - PROTOBUF_FIELD_OFFSET(TrendArchiveHour, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendArchiveHour::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrendArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TrendArchive>()._has_bits_);
  static void set_has_app_signal_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrendArchive::TrendArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hours_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendArchive)
}
TrendArchive::TrendArchive(const TrendArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hours_(from.hours_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_signal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_signal_id()) {
    app_signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_signal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto.TrendArchive)
}

void TrendArchive::SharedCtor() {
app_signal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrendArchive::~TrendArchive() {
  // @@protoc_insertion_point(destructor:Proto.TrendArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  app_signal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrendArchive::ArenaDtor(void* object) {
  TrendArchive* _this = reinterpret_cast< TrendArchive* >(object);
  (void)_this;
}
void TrendArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hours_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    app_signal_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string app_signal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_signal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.TrendArchive.app_signal_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TrendArchiveHour hours = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hours(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_signal_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_signal_id().data(), static_cast<int>(this->_internal_app_signal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.TrendArchive.app_signal_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_signal_id(), target);
  }

  // repeated .Proto.TrendArchiveHour hours = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hours_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_hours(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendArchive)
  return target;
}

size_t TrendArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.TrendArchiveHour hours = 10;
  total_size += 1UL * this->_internal_hours_size();
  for (const auto& msg : this->hours_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string app_signal_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_signal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendArchive)
    MergeFrom(*source);
  }
}

void TrendArchive::MergeFrom(const TrendArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hours_.MergeFrom(from.hours_);
  if (from._internal_has_app_signal_id()) {
    _internal_set_app_signal_id(from._internal_app_signal_id());
  }
}

void TrendArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendArchive::CopyFrom(const TrendArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendArchive::IsInitialized() const {
  return true;
}

void TrendArchive::InternalSwap(TrendArchive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hours_.InternalSwap(&other->hours_);
  app_signal_id_.Swap(&other->app_signal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendArchive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrendViewLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<TrendViewLimit>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_high_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TrendViewLimit::TrendViewLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendViewLimit)
}
TrendViewLimit::TrendViewLimit(const TrendViewLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&high_limit_, &from.high_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&high_limit_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Proto.TrendViewLimit)
}

void TrendViewLimit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&high_limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&high_limit_)) + sizeof(type_));
}

TrendViewLimit::~TrendViewLimit() {
  // @@protoc_insertion_point(destructor:Proto.TrendViewLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendViewLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrendViewLimit::ArenaDtor(void* object) {
  TrendViewLimit* _this = reinterpret_cast< TrendViewLimit* >(object);
  (void)_this;
}
void TrendViewLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendViewLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendViewLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendViewLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&high_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&high_limit_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendViewLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double high_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_high_limit(&has_bits);
          high_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double low_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_low_limit(&has_bits);
          low_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendViewLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendViewLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional double high_limit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_high_limit(), target);
  }

  // optional double low_limit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_low_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendViewLimit)
  return target;
}

size_t TrendViewLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendViewLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double high_limit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double low_limit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendViewLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendViewLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendViewLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendViewLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendViewLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendViewLimit)
    MergeFrom(*source);
  }
}

void TrendViewLimit::MergeFrom(const TrendViewLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendViewLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      high_limit_ = from.high_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_limit_ = from.low_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrendViewLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendViewLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendViewLimit::CopyFrom(const TrendViewLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendViewLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendViewLimit::IsInitialized() const {
  return true;
}

void TrendViewLimit::InternalSwap(TrendViewLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrendViewLimit, type_)
      + sizeof(TrendViewLimit::type_)
      - PROTOBUF_FIELD_OFFSET(TrendViewLimit, high_limit_)>(
          reinterpret_cast<char*>(&high_limit_),
          reinterpret_cast<char*>(&other->high_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendViewLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrendSignalParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TrendSignalParam>()._has_bits_);
  static void set_has_signal_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_signal_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_equipment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_line_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_high_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_low_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_view_high_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_view_low_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_analog_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrendSignalParam::_i_give_permission_to_break_this_code_default_analog_format_{{{"g_9_or_9e", 9}}, {nullptr}};
TrendSignalParam::TrendSignalParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  view_limits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendSignalParam)
}
TrendSignalParam::TrendSignalParam(const TrendSignalParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      view_limits_(from.view_limits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signal_id()) {
    signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signal_id(), 
      GetArena());
  }
  app_signal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_signal_id()) {
    app_signal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_signal_id(), 
      GetArena());
  }
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption()) {
    caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caption(), 
      GetArena());
  }
  equipment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equipment_id()) {
    equipment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equipment_id(), 
      GetArena());
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unit()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  analog_format_.UnsafeSetDefault(nullptr);
  if (from._internal_has_analog_format()) {
    analog_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_analog_format(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_low_limit_) -
    reinterpret_cast<char*>(&type_)) + sizeof(view_low_limit_));
  // @@protoc_insertion_point(copy_constructor:Proto.TrendSignalParam)
}

void TrendSignalParam::SharedCtor() {
signal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_signal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
equipment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
analog_format_.UnsafeSetDefault(nullptr);
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_low_limit_) -
    reinterpret_cast<char*>(&type_)) + sizeof(view_low_limit_));
}

TrendSignalParam::~TrendSignalParam() {
  // @@protoc_insertion_point(destructor:Proto.TrendSignalParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendSignalParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_signal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  analog_format_.DestroyNoArena(nullptr);
}

void TrendSignalParam::ArenaDtor(void* object) {
  TrendSignalParam* _this = reinterpret_cast< TrendSignalParam* >(object);
  (void)_this;
}
void TrendSignalParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendSignalParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendSignalParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendSignalParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  view_limits_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      signal_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      app_signal_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      equipment_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      unit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      analog_format_.ClearToDefault(::Proto::TrendSignalParam::_i_give_permission_to_break_this_code_default_analog_format_, GetArena());
       }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&precision_) -
        reinterpret_cast<char*>(&type_)) + sizeof(precision_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&view_low_limit_) -
        reinterpret_cast<char*>(&color_)) + sizeof(view_low_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendSignalParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string signal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.TrendSignalParam.signal_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string app_signal_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_app_signal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.TrendSignalParam.app_signal_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caption = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.TrendSignalParam.caption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string equipment_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_equipment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.TrendSignalParam.equipment_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.TrendSignalParam.unit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double line_weight = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_line_weight(&has_bits);
          line_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double high_limit = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_high_limit(&has_bits);
          high_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double low_limit = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_low_limit(&has_bits);
          low_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double view_high_limit = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_view_high_limit(&has_bits);
          view_high_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double view_low_limit = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_view_low_limit(&has_bits);
          view_low_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TrendViewLimit view_limits = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_view_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 color = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string analog_format = 41 [default = "g_9_or_9e"];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_analog_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.TrendSignalParam.analog_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendSignalParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendSignalParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string signal_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signal_id().data(), static_cast<int>(this->_internal_signal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.TrendSignalParam.signal_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signal_id(), target);
  }

  // optional string app_signal_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_signal_id().data(), static_cast<int>(this->_internal_app_signal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.TrendSignalParam.app_signal_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_signal_id(), target);
  }

  // optional string caption = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.TrendSignalParam.caption");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_caption(), target);
  }

  // optional string equipment_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_equipment_id().data(), static_cast<int>(this->_internal_equipment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.TrendSignalParam.equipment_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_equipment_id(), target);
  }

  // optional int32 type = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_type(), target);
  }

  // optional string unit = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.TrendSignalParam.unit");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_unit(), target);
  }

  // optional int32 precision = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_precision(), target);
  }

  // optional double line_weight = 19 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_line_weight(), target);
  }

  // optional double high_limit = 20;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_high_limit(), target);
  }

  // optional double low_limit = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_low_limit(), target);
  }

  // optional double view_high_limit = 31;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_view_high_limit(), target);
  }

  // optional double view_low_limit = 32;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_view_low_limit(), target);
  }

  // repeated .Proto.TrendViewLimit view_limits = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_view_limits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_view_limits(i), target, stream);
  }

  // optional uint32 color = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_color(), target);
  }

  // optional string analog_format = 41 [default = "g_9_or_9e"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_analog_format().data(), static_cast<int>(this->_internal_analog_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Proto.TrendSignalParam.analog_format");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_analog_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendSignalParam)
  return target;
}

size_t TrendSignalParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendSignalParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.TrendViewLimit view_limits = 33;
  total_size += 2UL * this->_internal_view_limits_size();
  for (const auto& msg : this->view_limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string signal_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signal_id());
    }

    // optional string app_signal_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_signal_id());
    }

    // optional string caption = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional string equipment_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_equipment_id());
    }

    // optional string unit = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit());
    }

    // optional string analog_format = 41 [default = "g_9_or_9e"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_analog_format());
    }

    // optional int32 type = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 precision = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 color = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_color());
    }

    // optional double line_weight = 19 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double high_limit = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double low_limit = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double view_high_limit = 31;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double view_low_limit = 32;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendSignalParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendSignalParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendSignalParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendSignalParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendSignalParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendSignalParam)
    MergeFrom(*source);
  }
}

void TrendSignalParam::MergeFrom(const TrendSignalParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendSignalParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  view_limits_.MergeFrom(from.view_limits_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signal_id(from._internal_signal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_app_signal_id(from._internal_app_signal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_equipment_id(from._internal_equipment_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_unit(from._internal_unit());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_analog_format(from._internal_analog_format());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      precision_ = from.precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000200u) {
      line_weight_ = from.line_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      high_limit_ = from.high_limit_;
    }
    if (cached_has_bits & 0x00000800u) {
      low_limit_ = from.low_limit_;
    }
    if (cached_has_bits & 0x00001000u) {
      view_high_limit_ = from.view_high_limit_;
    }
    if (cached_has_bits & 0x00002000u) {
      view_low_limit_ = from.view_low_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrendSignalParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendSignalParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendSignalParam::CopyFrom(const TrendSignalParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendSignalParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendSignalParam::IsInitialized() const {
  return true;
}

void TrendSignalParam::InternalSwap(TrendSignalParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  view_limits_.InternalSwap(&other->view_limits_);
  signal_id_.Swap(&other->signal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_signal_id_.Swap(&other->app_signal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caption_.Swap(&other->caption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipment_id_.Swap(&other->equipment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  analog_format_.Swap(&other->analog_format_, nullptr, GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrendSignalParam, view_low_limit_)
      + sizeof(TrendSignalParam::view_low_limit_)
      - PROTOBUF_FIELD_OFFSET(TrendSignalParam, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendSignalParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrendSignalSet::_Internal {
 public:
};

TrendSignalSet::TrendSignalSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signal_params_(arena),
  archive_local_time_(arena),
  archive_system_time_(arena),
  archive_plant_time_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendSignalSet)
}
TrendSignalSet::TrendSignalSet(const TrendSignalSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signal_params_(from.signal_params_),
      archive_local_time_(from.archive_local_time_),
      archive_system_time_(from.archive_system_time_),
      archive_plant_time_(from.archive_plant_time_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.TrendSignalSet)
}

void TrendSignalSet::SharedCtor() {
}

TrendSignalSet::~TrendSignalSet() {
  // @@protoc_insertion_point(destructor:Proto.TrendSignalSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendSignalSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrendSignalSet::ArenaDtor(void* object) {
  TrendSignalSet* _this = reinterpret_cast< TrendSignalSet* >(object);
  (void)_this;
}
void TrendSignalSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendSignalSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendSignalSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendSignalSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_params_.Clear();
  archive_local_time_.Clear();
  archive_system_time_.Clear();
  archive_plant_time_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendSignalSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.TrendSignalParam signal_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TrendArchive archive_local_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_archive_local_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TrendArchive archive_system_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_archive_system_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TrendArchive archive_plant_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_archive_plant_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendSignalSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendSignalSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.TrendSignalParam signal_params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_signal_params(i), target, stream);
  }

  // repeated .Proto.TrendArchive archive_local_time = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_archive_local_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_archive_local_time(i), target, stream);
  }

  // repeated .Proto.TrendArchive archive_system_time = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_archive_system_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_archive_system_time(i), target, stream);
  }

  // repeated .Proto.TrendArchive archive_plant_time = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_archive_plant_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_archive_plant_time(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendSignalSet)
  return target;
}

size_t TrendSignalSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendSignalSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.TrendSignalParam signal_params = 2;
  total_size += 1UL * this->_internal_signal_params_size();
  for (const auto& msg : this->signal_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.TrendArchive archive_local_time = 10;
  total_size += 1UL * this->_internal_archive_local_time_size();
  for (const auto& msg : this->archive_local_time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.TrendArchive archive_system_time = 11;
  total_size += 1UL * this->_internal_archive_system_time_size();
  for (const auto& msg : this->archive_system_time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.TrendArchive archive_plant_time = 12;
  total_size += 1UL * this->_internal_archive_plant_time_size();
  for (const auto& msg : this->archive_plant_time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendSignalSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendSignalSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendSignalSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendSignalSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendSignalSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendSignalSet)
    MergeFrom(*source);
  }
}

void TrendSignalSet::MergeFrom(const TrendSignalSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendSignalSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_params_.MergeFrom(from.signal_params_);
  archive_local_time_.MergeFrom(from.archive_local_time_);
  archive_system_time_.MergeFrom(from.archive_system_time_);
  archive_plant_time_.MergeFrom(from.archive_plant_time_);
}

void TrendSignalSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendSignalSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendSignalSet::CopyFrom(const TrendSignalSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendSignalSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendSignalSet::IsInitialized() const {
  return true;
}

void TrendSignalSet::InternalSwap(TrendSignalSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signal_params_.InternalSwap(&other->signal_params_);
  archive_local_time_.InternalSwap(&other->archive_local_time_);
  archive_system_time_.InternalSwap(&other->archive_system_time_);
  archive_plant_time_.InternalSwap(&other->archive_plant_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendSignalSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrendRuler::_Internal {
 public:
  using HasBits = decltype(std::declval<TrendRuler>()._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_signal_values(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrendRuler::TrendRuler(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendRuler)
}
TrendRuler::TrendRuler(const TrendRuler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_signal_values_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(show_signal_values_));
  // @@protoc_insertion_point(copy_constructor:Proto.TrendRuler)
}

void TrendRuler::SharedCtor() {
time_stamp_ = PROTOBUF_ULONGLONG(0);
show_ = true;
show_signal_values_ = true;
}

TrendRuler::~TrendRuler() {
  // @@protoc_insertion_point(destructor:Proto.TrendRuler)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendRuler::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrendRuler::ArenaDtor(void* object) {
  TrendRuler* _this = reinterpret_cast< TrendRuler* >(object);
  (void)_this;
}
void TrendRuler::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendRuler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendRuler::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendRuler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    time_stamp_ = PROTOBUF_ULONGLONG(0);
    show_ = true;
    show_signal_values_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendRuler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool show = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_show(&has_bits);
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_signal_values = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_show_signal_values(&has_bits);
          show_signal_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendRuler::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendRuler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 time_stamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_time_stamp(), target);
  }

  // optional bool show = 3 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_show(), target);
  }

  // optional bool show_signal_values = 4 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_show_signal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendRuler)
  return target;
}

size_t TrendRuler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendRuler)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 time_stamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool show = 3 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool show_signal_values = 4 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendRuler::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendRuler)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendRuler* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendRuler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendRuler)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendRuler)
    MergeFrom(*source);
  }
}

void TrendRuler::MergeFrom(const TrendRuler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendRuler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_ = from.show_;
    }
    if (cached_has_bits & 0x00000004u) {
      show_signal_values_ = from.show_signal_values_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrendRuler::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendRuler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendRuler::CopyFrom(const TrendRuler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendRuler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendRuler::IsInitialized() const {
  return true;
}

void TrendRuler::InternalSwap(TrendRuler* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_stamp_, other->time_stamp_);
  swap(show_, other->show_);
  swap(show_signal_values_, other->show_signal_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendRuler::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrendRulerSet::_Internal {
 public:
};

TrendRulerSet::TrendRulerSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rulers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendRulerSet)
}
TrendRulerSet::TrendRulerSet(const TrendRulerSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rulers_(from.rulers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.TrendRulerSet)
}

void TrendRulerSet::SharedCtor() {
}

TrendRulerSet::~TrendRulerSet() {
  // @@protoc_insertion_point(destructor:Proto.TrendRulerSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendRulerSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrendRulerSet::ArenaDtor(void* object) {
  TrendRulerSet* _this = reinterpret_cast< TrendRulerSet* >(object);
  (void)_this;
}
void TrendRulerSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendRulerSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendRulerSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendRulerSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rulers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendRulerSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.TrendRuler rulers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rulers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendRulerSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendRulerSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.TrendRuler rulers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rulers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rulers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendRulerSet)
  return target;
}

size_t TrendRulerSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendRulerSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.TrendRuler rulers = 2;
  total_size += 1UL * this->_internal_rulers_size();
  for (const auto& msg : this->rulers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendRulerSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendRulerSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendRulerSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendRulerSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendRulerSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendRulerSet)
    MergeFrom(*source);
  }
}

void TrendRulerSet::MergeFrom(const TrendRulerSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendRulerSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rulers_.MergeFrom(from.rulers_);
}

void TrendRulerSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendRulerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendRulerSet::CopyFrom(const TrendRulerSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendRulerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendRulerSet::IsInitialized() const {
  return true;
}

void TrendRulerSet::InternalSwap(TrendRulerSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rulers_.InternalSwap(&other->rulers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendRulerSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trend::_Internal {
 public:
  using HasBits = decltype(std::declval<Trend>()._has_bits_);
  static const ::Proto::TrendSignalSet& signal_set(const Trend* msg);
  static void set_has_signal_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::TrendRulerSet& ruler_set(const Trend* msg);
  static void set_has_ruler_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Proto::TrendSignalSet&
Trend::_Internal::signal_set(const Trend* msg) {
  return *msg->signal_set_;
}
const ::Proto::TrendRulerSet&
Trend::_Internal::ruler_set(const Trend* msg) {
  return *msg->ruler_set_;
}
Trend::Trend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.Trend)
}
Trend::Trend(const Trend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signal_set()) {
    signal_set_ = new ::Proto::TrendSignalSet(*from.signal_set_);
  } else {
    signal_set_ = nullptr;
  }
  if (from._internal_has_ruler_set()) {
    ruler_set_ = new ::Proto::TrendRulerSet(*from.ruler_set_);
  } else {
    ruler_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.Trend)
}

void Trend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signal_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ruler_set_) -
    reinterpret_cast<char*>(&signal_set_)) + sizeof(ruler_set_));
}

Trend::~Trend() {
  // @@protoc_insertion_point(destructor:Proto.Trend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trend::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signal_set_;
  if (this != internal_default_instance()) delete ruler_set_;
}

void Trend::ArenaDtor(void* object) {
  Trend* _this = reinterpret_cast< Trend* >(object);
  (void)_this;
}
void Trend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trend::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Trend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(signal_set_ != nullptr);
      signal_set_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ruler_set_ != nullptr);
      ruler_set_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Proto.TrendSignalSet signal_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TrendRulerSet ruler_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ruler_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Trend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proto.TrendSignalSet signal_set = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal_set(this), target, stream);
  }

  // optional .Proto.TrendRulerSet ruler_set = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ruler_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Trend)
  return target;
}

size_t Trend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Trend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Proto.TrendSignalSet signal_set = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_set_);
    }

    // optional .Proto.TrendRulerSet ruler_set = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ruler_set_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Trend)
  GOOGLE_DCHECK_NE(&from, this);
  const Trend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Trend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Trend)
    MergeFrom(*source);
  }
}

void Trend::MergeFrom(const Trend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Trend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_signal_set()->::Proto::TrendSignalSet::MergeFrom(from._internal_signal_set());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ruler_set()->::Proto::TrendRulerSet::MergeFrom(from._internal_ruler_set());
    }
  }
}

void Trend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Trend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trend::CopyFrom(const Trend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Trend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trend::IsInitialized() const {
  return true;
}

void Trend::InternalSwap(Trend* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trend, ruler_set_)
      + sizeof(Trend::ruler_set_)
      - PROTOBUF_FIELD_OFFSET(Trend, signal_set_)>(
          reinterpret_cast<char*>(&signal_set_),
          reinterpret_cast<char*>(&other->signal_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrendParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TrendParam>()._has_bits_);
  static void set_has_view_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lane_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_back_color_1st(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_back_color_2nd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scale_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TrendParam::TrendParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendParam)
}
TrendParam::TrendParam(const TrendParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_mode_, &from.view_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_count_) -
    reinterpret_cast<char*>(&view_mode_)) + sizeof(lane_count_));
  // @@protoc_insertion_point(copy_constructor:Proto.TrendParam)
}

void TrendParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&view_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&back_color_2nd_) -
    reinterpret_cast<char*>(&view_mode_)) + sizeof(back_color_2nd_));
time_type_ = 2;
lane_count_ = 1;
}

TrendParam::~TrendParam() {
  // @@protoc_insertion_point(destructor:Proto.TrendParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrendParam::ArenaDtor(void* object) {
  TrendParam* _this = reinterpret_cast< TrendParam* >(object);
  (void)_this;
}
void TrendParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&view_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&back_color_2nd_) -
        reinterpret_cast<char*>(&view_mode_)) + sizeof(back_color_2nd_));
    time_type_ = 2;
    lane_count_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 view_mode = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_view_mode(&has_bits);
          view_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_type = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_type(&has_bits);
          time_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lane_count = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lane_count(&has_bits);
          lane_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 scale_type = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_scale_type(&has_bits);
          scale_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 start_time = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 duration = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 back_color_1st = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_back_color_1st(&has_bits);
          back_color_1st_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 back_color_2nd = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_back_color_2nd(&has_bits);
          back_color_2nd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 view_mode = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_view_mode(), target);
  }

  // optional int32 time_type = 3 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time_type(), target);
  }

  // optional int32 lane_count = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lane_count(), target);
  }

  // optional int32 scale_type = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_scale_type(), target);
  }

  // optional fixed64 start_time = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(50, this->_internal_start_time(), target);
  }

  // optional int64 duration = 51;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(51, this->_internal_duration(), target);
  }

  // optional uint32 back_color_1st = 70;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_back_color_1st(), target);
  }

  // optional uint32 back_color_2nd = 71;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_back_color_2nd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendParam)
  return target;
}

size_t TrendParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 view_mode = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_view_mode());
    }

    // optional int32 scale_type = 5 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_scale_type());
    }

    // optional fixed64 start_time = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional int64 duration = 51;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_duration());
    }

    // optional uint32 back_color_1st = 70;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_back_color_1st());
    }

    // optional uint32 back_color_2nd = 71;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_back_color_2nd());
    }

    // optional int32 time_type = 3 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_type());
    }

    // optional int32 lane_count = 4 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lane_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendParam)
    MergeFrom(*source);
  }
}

void TrendParam::MergeFrom(const TrendParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      view_mode_ = from.view_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_type_ = from.scale_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      back_color_1st_ = from.back_color_1st_;
    }
    if (cached_has_bits & 0x00000020u) {
      back_color_2nd_ = from.back_color_2nd_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_type_ = from.time_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      lane_count_ = from.lane_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrendParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendParam::CopyFrom(const TrendParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendParam::IsInitialized() const {
  return true;
}

void TrendParam::InternalSwap(TrendParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrendParam, back_color_2nd_)
      + sizeof(TrendParam::back_color_2nd_)
      - PROTOBUF_FIELD_OFFSET(TrendParam, view_mode_)>(
          reinterpret_cast<char*>(&view_mode_),
          reinterpret_cast<char*>(&other->view_mode_));
  swap(time_type_, other->time_type_);
  swap(lane_count_, other->lane_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrendWidget::_Internal {
 public:
  using HasBits = decltype(std::declval<TrendWidget>()._has_bits_);
  static const ::Proto::Trend& trend(const TrendWidget* msg);
  static void set_has_trend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Proto::TrendParam& trend_param(const TrendWidget* msg);
  static void set_has_trend_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Proto::Trend&
TrendWidget::_Internal::trend(const TrendWidget* msg) {
  return *msg->trend_;
}
const ::Proto::TrendParam&
TrendWidget::_Internal::trend_param(const TrendWidget* msg) {
  return *msg->trend_param_;
}
TrendWidget::TrendWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto.TrendWidget)
}
TrendWidget::TrendWidget(const TrendWidget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trend()) {
    trend_ = new ::Proto::Trend(*from.trend_);
  } else {
    trend_ = nullptr;
  }
  if (from._internal_has_trend_param()) {
    trend_param_ = new ::Proto::TrendParam(*from.trend_param_);
  } else {
    trend_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.TrendWidget)
}

void TrendWidget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trend_param_) -
    reinterpret_cast<char*>(&trend_)) + sizeof(trend_param_));
}

TrendWidget::~TrendWidget() {
  // @@protoc_insertion_point(destructor:Proto.TrendWidget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrendWidget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trend_;
  if (this != internal_default_instance()) delete trend_param_;
}

void TrendWidget::ArenaDtor(void* object) {
  TrendWidget* _this = reinterpret_cast< TrendWidget* >(object);
  (void)_this;
}
void TrendWidget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrendWidget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrendWidget::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TrendWidget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trend_ != nullptr);
      trend_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trend_param_ != nullptr);
      trend_param_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrendWidget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Proto.Trend trend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Proto.TrendParam trend_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trend_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrendWidget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TrendWidget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proto.Trend trend = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trend(this), target, stream);
  }

  // optional .Proto.TrendParam trend_param = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trend_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TrendWidget)
  return target;
}

size_t TrendWidget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TrendWidget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Proto.Trend trend = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trend_);
    }

    // optional .Proto.TrendParam trend_param = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trend_param_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrendWidget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TrendWidget)
  GOOGLE_DCHECK_NE(&from, this);
  const TrendWidget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrendWidget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TrendWidget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TrendWidget)
    MergeFrom(*source);
  }
}

void TrendWidget::MergeFrom(const TrendWidget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TrendWidget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trend()->::Proto::Trend::MergeFrom(from._internal_trend());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trend_param()->::Proto::TrendParam::MergeFrom(from._internal_trend_param());
    }
  }
}

void TrendWidget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TrendWidget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrendWidget::CopyFrom(const TrendWidget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TrendWidget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrendWidget::IsInitialized() const {
  return true;
}

void TrendWidget::InternalSwap(TrendWidget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrendWidget, trend_param_)
      + sizeof(TrendWidget::trend_param_)
      - PROTOBUF_FIELD_OFFSET(TrendWidget, trend_)>(
          reinterpret_cast<char*>(&trend_),
          reinterpret_cast<char*>(&other->trend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrendWidget::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto::TrendStateRecord* Arena::CreateMaybeMessage< ::Proto::TrendStateRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendStateRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TrendArchiveHour* Arena::CreateMaybeMessage< ::Proto::TrendArchiveHour >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendArchiveHour >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TrendArchive* Arena::CreateMaybeMessage< ::Proto::TrendArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TrendViewLimit* Arena::CreateMaybeMessage< ::Proto::TrendViewLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendViewLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TrendSignalParam* Arena::CreateMaybeMessage< ::Proto::TrendSignalParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendSignalParam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TrendSignalSet* Arena::CreateMaybeMessage< ::Proto::TrendSignalSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendSignalSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TrendRuler* Arena::CreateMaybeMessage< ::Proto::TrendRuler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendRuler >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TrendRulerSet* Arena::CreateMaybeMessage< ::Proto::TrendRulerSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendRulerSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Trend* Arena::CreateMaybeMessage< ::Proto::Trend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Trend >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TrendParam* Arena::CreateMaybeMessage< ::Proto::TrendParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendParam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TrendWidget* Arena::CreateMaybeMessage< ::Proto::TrendWidget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::TrendWidget >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

#ifdef _MSC_VER
#pragma warning(pop)
#endif