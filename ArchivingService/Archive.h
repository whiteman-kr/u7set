#pragma once

#include <QHash>
#include <QMutex>
#include <QSqlDatabase>

#include "../lib/Hash.h"
#include "../lib/HostAddressPort.h"
#include "../lib/TimeStamp.h"
#include "../lib/CircularLogger.h"
#include "../lib/Types.h"
#include "../lib/Queue.h"
#include "../lib/AppSignal.h"

#include "ArchRequestThread.h"
#include "FileArchWriter.h"

class ArchRequestParam
{
public:
	void clearSignalHashes();

public:
	// requestID generated by TcpArchiveRequestServer
	//
	quint32 requestID = 0;

	// params from ARCHS_GET_APP_SIGNALS_STATES_START request
	//
	E::TimeType timeType = E::TimeType::System;

	qint64 startTime = 0;
	qint64 endTime = 0;

	QVector<Hash> signalHashes;
};

class ArchFile;

class Archive
{
public:
	static const int TIME_1S = 1000;								// 1000 millisecond
	static const int TIME_TO_EXPAND_REQUEST = 31 * TIME_1S;			// 31 seconds

	static const char* FIELD_PLANT_TIME;
	static const char* FIELD_SYSTEM_TIME;
	static const char* FIELD_ARCH_ID;
	static const char* FIELD_VALUE;
	static const char* FIELD_FLAGS;

	enum class FindResult
	{
		NotFound,
		Found,

		SearchError
	};

	class RequestContext
	{
	public:
		RequestContext(const ArchRequestParam& param);

		quint32 requestID() const { return m_param.requestID; }

		void appendArchFile(ArchFile* f);

		FindResult findData();

	private:
		ArchRequestParam m_param;

		QVector<ArchFile*> m_archFiles;

		static const int REQUEST_CONTEXT_MAX_STATES = 60000;

		int m_statesInBuffer = 0;
		SimpleAppSignalState m_statesBuffer[REQUEST_CONTEXT_MAX_STATES];
	};

public:
	Archive(const QString& projectID,
			const QString& equipmentID,
			const QString& archDir,
			CircularLoggerShared logger);
	~Archive();

	void start();

	void initArchSignals(const Proto::ArchSignals& archSignals);
	QString getSignalID(Hash signalHash);

	bool canReadWriteSignal(Hash signalHash);
	void setCanReadWriteSignal(Hash signalHash, bool canWrite);

	void setSignalInitialized(Hash signalHash, bool initilaized);

	bool isSignalExists(Hash signalHash) const { return m_archFiles.contains(signalHash); }

	int getFilesCount() const { return m_archFiles.count(); }

	void getArchSignalStatus(Hash signalHash, bool* canReadWrite, bool* isInitialized, bool* isAnalog);

	void getSignalsHashes(QVector<Hash>* hashes);

	static QString timeTypeStr(E::TimeType timeType);
	static qint64 localTimeOffsetFromUtc();

	QString archDir() const { return m_archDir; }
	QString projectID() const { return m_projectID; }
	QString equipmentID() const { return m_equipmentID; }

	QString archFullPath() const { return m_archFullPath; }

	void saveState(const SimpleAppSignalState& state);

	bool checkAndCreateArchiveDirs();
	bool archDirIsWritableChecking();
	bool createGroupDirs();

	bool shutdown();

	// flushing controlling functions (public)

	bool flushImmediately(ArchFile* archFile);
	bool waitingForImmediatelyFlushing(Hash signalHash, int waitTimeoutSeconds);

	ArchFile* getNextFileForFlushing(bool* flushAnyway);							// will be called from FileArchWriter

	//

	FindResult findData(const ArchRequestParam& param);

private:

	// flushing controlling functions (private)

	ArchFile* getNextRequiredImediatelyFlushing();
	void removeFromRequiredImmediatelyFlushing(ArchFile* file);

	void appendEmergencyFile(ArchFile* file);
	ArchFile* getNextEmergencyFile();
	void removeFromEmergencyFiles(ArchFile* file);

	ArchFile* getNextRegularFile();
	void pushBackInRegularFilesQueue(ArchFile* file);

	//

	void clear();

private:
	static const char* ARCH_DB_PREFIX;
	static const char* LONG_TERM_TABLE_PREFIX;
	static const char* SHORT_TERM_TABLE_PREFIX;

private:
	QString m_projectID;
	QString m_equipmentID;

	CircularLoggerShared m_log;

	//

	ArchRequestThread* m_archRequestThread = nullptr;
	FileArchWriter* m_fileArchWriter = nullptr;

	//

	QHash<Hash, ArchFile*> m_archFiles;

	qint64 m_archID = 0;

	// File Archive members

	QString m_archDir;
	QString m_archFullPath;

	QVector<ArchFile*> m_archFilesArray;

	QMutex m_immedaitelyFlushingMutex;
	QList<ArchFile*> m_requiredImmediatelyFlushing;			// files required immediately flushing (for example before reading)
	QHash<ArchFile*, bool> m_alreadyInRequiredImmediatelyFlushing;

	QMutex m_emergencyFilesMutex;
	QList<ArchFile*> m_emergencyFiles;
	QHash<ArchFile*, bool> m_alreadyInEmergencyFiles;

	QList<ArchFile*> m_regularFilesQueue;

	//

	QHash<quint32, RequestContext*> m_requestContexts;

	friend class ArchFile;
};
